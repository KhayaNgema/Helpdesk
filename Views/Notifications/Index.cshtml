@model IEnumerable<Helpdesk.Models.Notification>

@{
    ViewBag.Title = "Index";
}

<style>
    .list-group-item {
        border: none; /* Remove default list item border */
    }

    .notification-content {
        display: flex;
        align-items: center;
        width: 100%; /* Occupy the full width */
    }

    .notification-sender {
        flex: 0 0 180px; /* Set width for the sender */
        overflow: hidden; /* Hide overflowing text */
        text-overflow: ellipsis; /* Show ellipsis for truncated text */
        white-space: nowrap; /* Prevent text from wrapping to the next line */
        margin-right: 10px; /* Adjust spacing between sender and subject */
    }

    .notification-subject {
        flex: 0 0 130px; /* Set width for the subject */
        overflow: hidden; /* Hide overflowing text */
        text-overflow: ellipsis; /* Show ellipsis for truncated text */
        white-space: nowrap; /* Prevent text from wrapping to the next line */
        margin-right: 50px; /* Adjust spacing between subject and body */
    }

    .notification-body {
        flex: 0 0 680px; /* Set width for the body */
        overflow: hidden; /* Hide overflowing text */
        text-overflow: ellipsis; /* Show ellipsis for truncated text */
        white-space: nowrap; /* Prevent text from wrapping to the next line */
        margin-right: 15px; /* Adjust spacing between body and date */
    }

    .notification-date {
        flex: 0 0 auto; /* Do not grow or shrink, and maintain initial size */
        overflow: hidden; /* Hide overflowing text */
        text-overflow: ellipsis; /* Show ellipsis for truncated text */
        white-space: nowrap; /* Prevent text from wrapping to the next line */
        margin-left: auto; /* Push date to the rightmost side */
    }

    /* Ensure text is always written from left to right */
    .notification-content,
    .notification-sender,
    .notification-subject,
    .notification-body,
    .notification-date {
        direction: ltr;
    }



    .unread-notification {
        font-weight: bold;
    }



    .notification-item {
        cursor: pointer;
        border-bottom: 1px solid #eee; /* Add lighter gray horizontal borders */
        margin-bottom: 0;
        border-radius: 1px; /* Add border radius for a rounded appearance */
        transition: background-color 0.3s ease, transform 0.3s ease, box-shadow 0.3s ease; /* Add box-shadow property for shadow effect */
        padding: 10px;
        height: 50px;
    }

        .notification-item:hover {
            background-color: #e7eff0;
            transform: translateY(-3px); /* Move the element up by 3 pixels on hover for a 3D effect */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add dark shadow on hover */
        }



    .unread-notification {
        font-weight: bold;
    }

    .vertical-buttons {
        position: fixed;
        top: 120px;
        right: 0;
        z-index: 1000;
        display: flex;
        flex-direction: column;
        padding: 20px;
        margin-right: 20px;
    }

    .vertical-button {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 10px;
        margin-bottom: 10px;
        cursor: pointer;
        border: none;
        text-align: left;
        transition: background-color 0.3s ease;
        border-radius: 8px;
        position: relative;
        width: 50px;
        height: 50px;
        background-color: #030319; /* Button background color */
    }


        .vertical-button:hover {
            background-color: #e7eff0;
        }

        .vertical-button::before {
            content: attr(data-tooltip);
            background-color: #030319; /* Tooltip background color */
            color: #fff;
            border-radius: 4px;
            padding: 10px;
            position: absolute;
            top: 50%;
            right: calc(100% + 10px);
            transform: translateY(-50%);
            z-index: 999;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
            width: 80px; /* Adjusted width of the tooltip background */
        }

        .vertical-button:hover::before {
            opacity: 1;
        }

        .vertical-button i {
            color: #fff;
        }


        .vertical-button:hover i {
            color: #030319;
        }


    .search-container {
        position: fixed;
        top: 55px; /* Adjust the top position to add more space between the fixed container and the top of the screen */
        left: 0;
        width: 100%;
        padding: 10px;
        z-index: 1000;
        box-sizing: border-box;
        padding: 25px;
    }

    #notificationSearch {
        width: calc(100% - 60px); /* Increase the width by changing the value */
        border: 2px solid #6ff0dc; /* Add a border and adjust its style */
        border-radius: 10px;
        outline: none; /* Removed outline for better aesthetics */
        padding: 10px;
        margin-left: 640px; /* Adjust the left margin to move the search bar a bit to the right */
    }



    .search-results-not-found {
        color: #000000;
        font-style: italic;
    }

    .container {
        position: relative;
        z-index: 1;
        border-radius: 30px;
        margin-top: 0px; /* Adjust the margin as needed */
        padding-top: 35px; /* Adjust the padding as needed */
    }

    .search-results-not-found {
        color: #000000;
        display: none;
        position: fixed;
        top: 0%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-style: italic;
    }
</style>

<div class="container">

    @*<div class="vertical-buttons">
            <button class="vertical-button" data-tooltip="New" onclick="redirectTo('/Notifications/Create')"><i class="fas fa-plus"></i></button>
            <button class="vertical-button" data-tooltip="Inbox" onclick="redirectTo('/Notifications/Index')"><i class="fas fa-inbox"></i></button>
            <button class="vertical-button" data-tooltip="Sent" onclick="redirectTo('/YourControllerName/YourActionNameForSent')"><i class="fas fa-paper-plane"></i></button>
            <button class="vertical-button" data-tooltip="Starred" onclick="redirectTo('/YourControllerName/YourActionNameForStarred')"><i class="fas fa-star"></i></button>
            <button class="vertical-button" data-tooltip="Deleted" onclick="redirectTo('/YourControllerName/YourActionNameForDeleted')"><i class="fas fa-trash-alt"></i></button>
        </*@

    <script>
        function redirectTo(url) {
            window.location.href = url;
        }
    </script>


    <div class="search-container">
        <input type="text" id="notificationSearch" placeholder="Search notifications by sender, subject, or date..." oninput="searchNotifications()">
        <p class="search-results-not-found">No search results found. Please check your spelling or accuracy of your search.</p>
    </div>


    <ul id="notificationList" class="list-group">
        <!-- Existing notifications rendered on the server-side -->
        @foreach (var notification in Model.OrderByDescending(x => x.NotificationDate))
        {
            <li class="list-group-item notification-item @(notification.IsRead ? "" : "unread-notification")"
                data-notification-id="@notification.NotificationId"
                data-is-read="@notification.IsRead">
                <div class="notification-content">
                    <p class="notification-sender">@notification.Sender.FirstName @notification.Sender.LastName</p>
                    <p class="notification-subject">@notification.NotificationSubject</p>
                    <p class="notification-body">@notification.NotificationBody</p>
                    <p class="notification-date" data-notification-date="@notification.NotificationDate" data-time-zone-id="UTC">
                        @FormatNotificationDate(notification.NotificationDate, "UTC")
                    </p>
                </div>
            </li>
        }
    </ul>
</div>


<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.11/signalr.min.js"></script>

<script>
    $(document).ready(function () {
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/NotificationHub")
            .build();

        connection.on("receiveNotification", function (notification) {
            console.log("Received notification:", notification);
            updateUIWithNotification(notification);
        });

        connection.start()
            .then(function () {
                console.log("SignalR connected");
            })
            .catch(function (err) {
                console.error("Error connecting to SignalR:", err);
            });

        function updateUIWithNotification(notificationItem) {
            var newNotificationHtml = `
            <li class="list-group-item notification-item ${(notificationItem.IsRead) ? "" : "unread-notification"}"
                data-notification-id="${notificationItem.NotificationId}"
                data-is-read="${notificationItem.IsRead}">
                <div class="notification-content">
                    <p class="notification-sender">${notificationItem.Sender.FirstName} ${notificationItem.Sender.LastName}</p>
                    <p class="notification-subject">${notificationItem.NotificationSubject}</p>
                    <p class="notification-body">${notificationItem.NotificationBody}</p>
                    <p class="notification-date" data-notification-date="${notificationItem.NotificationDate}" data-time-zone-id="UTC">
                        ${formatNotificationDate(notificationItem.NotificationDate, "UTC")}
                    </p>
                </div>
            </li>`;

            $("#notificationList").prepend(newNotificationHtml);
        }

        $(document).on("click", ".notification-item", function () {
            const notificationId = $(this).data("notification-id");
            const isRead = $(this).data("is-read");

            if (!isRead) {
                $(this).data("is-read", true);
                $(this).removeClass("unread-notification");
            }

            window.location.href = `/Notifications/Details/${notificationId}`;
        });

        function searchNotifications() {
            var searchTerm = $('#notificationSearch').val().toLowerCase();
            $('.search-results-not-found').hide();

            $('#notificationList .notification-item').each(function () {
                var sender = $(this).find('.notification-sender').text().toLowerCase();
                var subject = $(this).find('.notification-subject').text().toLowerCase();
                var date = $(this).find('.notification-date').text().toLowerCase();

                if (sender.includes(searchTerm) || subject.includes(searchTerm) || date.includes(searchTerm)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });

            if ($('#notificationList .notification-item:visible').length === 0) {
                $('.search-results-not-found').show();
            }
        }

        $(document).ready(function () {
            $('#notificationSearch').on('input', searchNotifications);
        });
    });
</script>
@functions {
    public string FormatNotificationDate(DateTime notificationDate, string timeZoneId)
    {
        var timeZone = TimeZoneInfo.FindSystemTimeZoneById(timeZoneId);
        var now = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timeZone);
        var timeDifference = now - notificationDate;

        if (timeDifference.TotalSeconds < 60)
        {
            return "Just now";
        }
        else if (timeDifference.TotalMinutes < 60)
        {
            var minutes = (int)timeDifference.TotalMinutes;
            return $"{minutes} minute{(minutes == 1 ? "" : "s")} ago";
        }
        else if (timeDifference.TotalHours < 24)
        {
            var hours = (int)timeDifference.TotalHours;
            return $"{hours} hour{(hours == 1 ? "" : "s")} ago";
        }
        else if (timeDifference.TotalDays < 1)
        {
            return notificationDate.ToString("HH:mm");
        }
        else if (timeDifference.TotalDays < 2)
        {
            return "Yesterday";
        }
        else if (timeDifference.TotalDays < 3)
        {
            return $"{(int)timeDifference.TotalDays} day{(timeDifference.TotalDays == 1 ? "" : "s")} ago";
        }
        else
        {
            // Display the date in the format dd MMM yyyy for notifications older than 3 days
            return notificationDate.ToString("dd MMM yyyy");
        }
    }
}






















