@model IEnumerable<Helpdesk.Models.ResolvedIncident>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Resolved Incidents Index";
}

<style>
    /* Add some styles for better appearance */
    h2 {
        text-align: center;
        margin-bottom: 20px;
    }

    .table-container {
        margin: 0 auto; /* Center the table horizontally */
        text-align: center; /* Center the table header */
    }

    .table-responsive {
        margin: 0 auto; /* Center the table horizontally */
        border-radius: 10px; /* Rounded corners for the table */
        overflow: hidden; /* Hide overflowing content */
    }

    table {
        width: 100%;
        table-layout: fixed;
    }

    th, td {
        text-align: center;
        vertical-align: middle;
    }

    th {
        background-color: #030319; /* Set background color in th */
        color: white; /* Set text color in th to white */
    }

    .search-box-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .search-box {
        margin-right: 10px;
    }

    .search-input {
        padding: 5px;
        width: 300px;
    }

    .no-results-message {
        text-align: center;
        color: red;
        font-weight: bold;
        margin-top: 10px;
    }

    /* Add some styles for the action buttons */
    .btn-actions {
        display: flex;
        justify-content: center;
    }

        .btn-actions a {
            margin: 0 5px;
        }
</style>

<h2>Resolved Incidents Index</h2>

<div class="search-box-container">
    <div class="search-box">
        <input type="text" id="searchInput" class="search-input" placeholder="Search...">
    </div>
</div>

<div class="table-container">
    <div class="table-responsive">
        <table class="table table-bordered" id="resolvedIncidentTable">
            <thead>
                <tr>
                    <th style="width: 20%;">Priority</th>
                    <th style="width: 20%;">Ticket No.</th>
                    <th style="width: 20%;">Client Name</th>
                    <th style="width: 20%;">Product Name</th>
                    <th style="width: 20%;">Subject</th>
                    <th style="width: 20%;">Category</th>
                    <th style="width: 20%;">Sub-category</th>
                    <th style="width: 20%;">Issue Description</th>
                    <th style="width: 20%;">Supporting File</th>
                    <th style="width: 20%;">Product Version</th>
                    <th style="width: 20%;">Database Type</th>
                    <th style="width: 20%;">Hardware Description</th>
                    <th style="width: 20%;">Environment Type</th>
                    <th style="width: 20%;">Virtualized Platform</th>
                    <th style="width: 20%;">Title</th>
                    <th style="width: 20%;">Caller's Name</th>
                    <th style="width: 20%;">Email Address</th>
                    <th style="width: 20%;">Contact Number</th>
                    <th style="width: 20%;">Designation</th>
                    <th style="width: 20%;">Date Logged</th>
                    <th style="width: 20%;">Status</th>
                    <th style="width: 20%;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.SubCategories.Priority.PriorityName)</td>
                        <td>@Html.DisplayFor(modelItem => item.ReferenceNumber)</td>
                        <td>@Html.DisplayFor(modelItem => item.ApprovedRequest.ClientName)</td>
                        <td>@Html.DisplayFor(modelItem => item.Products.ProductName)</td>
                        <td>@Html.DisplayFor(modelItem => item.Subject)</td>
                        <td>@Html.DisplayFor(modelItem => item.Category.CategoryName)</td>
                        <td>@Html.DisplayFor(modelItem => item.SubCategories.SubCategoryName)</td>
                        <td style="word-wrap: break-word;">@Html.DisplayFor(modelItem => item.Description)</td>
                        <td>
                            @{
                                var isImage = IsImageFile(item.IssueFile);
                                var isVideo = IsVideoFile(item.IssueFile);
                                var isAudio = IsAudioFile(item.IssueFile);
                            }

                            @if (isImage)
                            {
                                <img src="@Url.Content(item.IssueFile)" alt="No file uploaded" class="img-thumbnail" style="max-width: 100px; max-height: 100px;" />
                            }
                            else if (isVideo)
                            {
                                <video width="320" height="240" controls>
                                    <source src="@Url.Content(item.IssueFile)" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>
                            }
                            else if (isAudio)
                            {
                                <audio controls>
                                    <source src="@Url.Content(item.IssueFile)" type="audio/mp3">
                                    Your browser does not support the audio tag.
                                </audio>
                            }
                        </td>
                        <td>@Html.DisplayFor(modelItem => item.ProductVersion)</td>
                        <td>@Html.DisplayFor(modelItem => item.DatabaseType.DatabaseName)</td>
                        <td>@Html.DisplayFor(modelItem => item.HardwareDescription.HardwareDescriptionName)</td>
                        <td>@Html.DisplayFor(modelItem => item.EnvironmentType.EnvironmentName)</td>
                        <td>@Html.DisplayFor(modelItem => item.VirtualizedPlatforms.VirtualizedPlatformName)</td>
                        <td>@Html.DisplayFor(modelItem => item.Title)</td>
                        <td>@Html.DisplayFor(modelItem => item.CallersName) @Html.DisplayFor(modelItem => item.CallersSurname)</td>
                        <td>@Html.DisplayFor(modelItem => item.EmailAddress)</td>
                        <td>@Html.DisplayFor(modelItem => item.CellNumber)</td>
                        <td>@Html.DisplayFor(modelItem => item.Designation.DesignationName)</td>
                        <td>@Html.DisplayFor(modelItem => item.LoggedDate)</td>
                        <td>@Html.DisplayFor(modelItem => item.TicketStatus)</td>
                        <td class="btn-actions">
                            @Html.ActionLink("Edit", "Edit", new { id = item.IncidentId }, new { @class = "btn btn-primary btn-sm" }) |
                            @Html.ActionLink("Details", "Details", new { id = item.IncidentId }, new { @class = "btn btn-info btn-sm" }) |
                            @Html.ActionLink("Delete", "Delete", new { id = item.IncidentId }, new { @class = "btn btn-danger btn-sm" })
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div id="noResultsMessage" class="no-results-message" style="display:none;">Search results not found.</div>
    </div>
</div>

<script>
    // Add JavaScript for dynamic search
    document.getElementById("searchInput").addEventListener("input", function () {
        var searchValue = this.value.toLowerCase();
        var rows = document.querySelectorAll("#resolvedIncidentTable tbody tr");
        var noResultsMessage = document.getElementById("noResultsMessage");

        var foundResults = false;

        rows.forEach(function (row) {
            var shouldHide = true;
            row.querySelectorAll("td").forEach(function (cell) {
                if (cell.textContent.toLowerCase().indexOf(searchValue) > -1) {
                    shouldHide = false;
                    foundResults = true;
                }
            });

            row.style.display = shouldHide ? "none" : "";
        });

        noResultsMessage.style.display = foundResults ? "none" : "block";
    });
</script>

@functions {
    private bool IsImageFile(string fileName)
    {
        string extension = Path.GetExtension(fileName)?.ToLower();
        return extension == ".jpg" || extension == ".jpeg" || extension == ".png" || extension == ".gif";
    }

    private bool IsVideoFile(string fileName)
    {
        string extension = Path.GetExtension(fileName)?.ToLower();
        return extension == ".mp4" || extension == ".avi" || extension == ".mkv" || extension == ".mov";
    }

    private bool IsAudioFile(string fileName)
    {
        string extension = Path.GetExtension(fileName)?.ToLower();
        return extension == ".mp3" || extension == ".wav" || extension == ".ogg";
    }
}
